#! /usr/bin/perl

# Copyright (c) 2019 Marc Espie <espie@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
# 
#
# look at the pics and show their size and aspect ratio

use File::Find;
use strict;
use warnings;

# Uses Farey sequences to get a good approximation
sub farey
{
	my ($x, $N) = @_;
    	my ($a, $b) = (0, 1);
    	my ($c, $d) = (1, 0);
	while ($b <= $N && $d <= $N) {
		my $mediant = ($a+$c)/($b+$d);
		if ($x == $mediant) {
			if ($b + $d <= $N) {
				return ($a+$c, $b+$d);
			} elsif ($d > $b) {
				return ($c, $d);
			} else {
				return ($a, $b);
			}
		} elsif ($x > $mediant) {
			($a, $b) = ($a+$c, $b+$d);
		} else {
			($c, $d) = ($a+$c, $b+$d);
		}
	}
	if ($b > $N) {
		return ($c, $d);
	} else {
		return ($a, $b);
	}
}

# first build the list of pics
my @list;
find(sub {
	return unless -f $_;
	push(@list, $File::Find::name);
    }, "pictures", "portrait-pictures", "landscape-pictures");

# then pass it off to whatever tool can do the deed
open(my $p, "-|", "gm", "identify", (sort @list)) or die;

open(my $out, ">", "list") or die;
open(my $V, ">", "portrait.list") or die;
open(my $H, ">", "landscape.list") or die;
while (<$p>) {
	chomp;
	if (m/^(.*?)(\[[0-9]+\])? JPEG ([0-9]+)x([0-9]+).*/) {
		my ($title, $h, $w) = ($1, $3, $4);
		my ($a, $b) = farey($h/ $w, 16);
		my $o;
		if ($a >= $b * 1.2) {
			$o = $H;
		} elsif ($a*1.2 <= $b) {
			$o = $V;
		} else {
			$o = $H;
		}
		print $o $title, "\n";
		print $out $title, " ", $h, "x", $w, " ", $a, ":", $b, "\n";
	} else {
		print STDERR "Bad line #$. from pipe: $_\n";
	}
}
close($out);
close($V);
close($H);
close($p);
